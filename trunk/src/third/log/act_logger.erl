%%auto generated by extends make
-module(act_logger).
-export([write_log/5,write_log_for_web/6, write_admin_log/2,fix/0]).
-include("global2.hrl").
-include("log2.hrl").
-include("global2.hrl").

%<source: act_logger.erl:1>%
get_log_level()->
        %<source: act_logger.erl:7>%
        ?ACT_LOG_LEVEL.

%<source: sys_logger.erl:1>%
write_log(Type,Module,Line,Format,Args)->
        %<source: sys_logger.erl:39>%
        Level = get_type_level(Type),
        %<source: sys_logger.erl:41>%
        case Level < get_log_level() + 1 of
                %<source: sys_logger.erl:42>%
                true ->
                        %<source: sys_logger.erl:43>%
                        Type2    = get_level_type2(Level),
                        %<source: sys_logger.erl:44>%
                        Format2  = get_level_flag(Level) ++ "(~p:~p:~p): " ++ Format ++ "~n",
                        %<source: sys_logger.erl:45>%
                        Args2    = [self(), Module, Line] ++ Args,
                        %<source: sys_logger.erl:47>%
                        Msg = {erlang:localtime(), {Type2, group_leader(), {self(), Format2, Args2}}},
                        %<source: sys_logger.erl:49>%
                        ?TRACE_LOG(Msg),
                        %<source: sys_logger.erl:51>%
                        Pids = get_log_svr_pids(),
                        %<source: sys_logger.erl:53>%
                        lists:foreach(fun(Pid) -> Pid ! {write_log, Msg} end, Pids);
                %<source: sys_logger.erl:54>%
                false ->
                        %<source: sys_logger.erl:55>%
                        pass
        %<source: sys_logger.erl:56>%
        end.


write_admin_log(Type, Log) ->
    Level = get_type_level(Type),
    case Level < get_log_level() + 1 of
        true ->
            Pid = nosql:get(log, act_log_svr),
            Pid ! {write_admin_log, Log};
        false -> skip
    end.


%<source: sys_logger.erl:1>%
get_level_flag(Level)->
        %<source: sys_logger.erl:10>%
        {_Level, _Type, _Type2, Flag} = lists:keyfind(Level, 1, get_log_levels()),
        %<source: sys_logger.erl:12>%
        Flag.

%<source: sys_logger.erl:1>%
get_type_level(Type)->
        %<source: sys_logger.erl:22>%
        {Level, _Type, _Type2, _Flag} = lists:keyfind(Type, 2, get_log_levels()),
        %<source: sys_logger.erl:24>%
        Level.

%<source: act_logger.erl:1>%
get_log_levels()->
        %<source: act_logger.erl:10>%
        ?ACT_LOG_LEVELS.

%<source: act_logger.erl:1>%
get_log_svr_pids()->
        %<source: act_logger.erl:13>%
        [nosql:get(log, act_log_svr),
         %<source: act_logger.erl:14>%
         nosql:get(log, sys_log_svr)].

%<source: sys_logger.erl:1>%
write_log_for_web(Env,Type,Module,Line,Format,Args)->
        %<source: sys_logger.erl:59>%
        {_, ScriptName} = lists:keyfind(script_name, 1, Env),
        %<source: sys_logger.erl:61>%
        write_log(Type, Module, Line, "~s: " ++ Format, lists:append([ScriptName], Args)).

%<source: sys_logger.erl:1>%
get_level_type2(Level)->
        %<source: sys_logger.erl:16>%
        {_Level, _Type, Type2, _Flag} = lists:keyfind(Level, 1, get_log_levels()),
        %<source: sys_logger.erl:18>%
        Type2.

fix() ->
        Pid = nosql:get(log, act_log_svr),

        Pid ! fix.